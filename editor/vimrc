"
"                        __   _(_)_ __ ___  _ __ ___ 
"                        \ \ / / | '_ ` _ \| '__/ __|
"                         \ V /| | | | | | | | | (__ 
"                          \_/ |_|_| |_| |_|_|  \___|
"
"
""""""""""""""""""""""""""""""""""" PLUGINS """"""""""""""""""""""""""""""""""""

if filereadable(expand("~/.vimrc.plugins"))
    source ~/.vimrc.plugins
endif

""""""""""""""""""""""""""""""""""" GENERAL """"""""""""""""""""""""""""""""""""

let mapleader=","
set nocompatible

set background=dark         " dark background

filetype plugin indent on   " autodetect file type
syntax on                   " syntax highlighting
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set t_ut=
set ttyscroll=10
set ttyfast

if has("termguicolors")
    set termguicolors
endif

if has('clipboard')
    if has('unnamedplus')   " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else                    " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

set ruler                   " Show the ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
set showcmd                 " Show partial commands in status line and

set mouse=""                " disable mouse
set noswapfile              " disable swap files
" set autochdir               " auto change current directory to file directory
set hidden                  " Allow buffer switching without saving
set history=1000
set number
set relativenumber
set virtualedit=block
set path+=**

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

noremap <leader>hl :nohl<CR>

cnoreabbrev hs split %:p:h/<C-R>
cnoreabbrev hv vsplit %:p:h/<C-R>
cnoreabbrev he e %:p:h/<C-R>
cnoreabbrev vt vertical terminal

"""""""""""""""""""""""""""""""""" APPERENCE """""""""""""""""""""""""""""""""""

color base16-gruvbox-dark-hard
let base16colorspace=256        " Access colors present in 256 colorspace

set showmode                    " Display the current mode

set cursorline                  " Highlight current line

" Highlight KILLME(note) note as vim highlights TODO(some) and NOTE
au Syntax * syn match note /\v<(FIXME|TODO|KILLME|NOTE)(\(\w+\))?/ containedin=.*Comment,vimCommentTitle
highlight def link note Todo

set laststatus=2                " always display statusline

set statusline=%<%n\ %F\ %m\ %r\ %y\ %{fugitive#head()}\ %=%l:%c\ %P

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then
                                " longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set colorcolumn=81              " higlight column 81
set list!
set listchars=tab:Â·\ ,trail:.   " Highlight problematic whitespace
set fillchars+=vert:\ 
set vb t_vb=                    " No more beeps
set lazyredraw
set nofoldenable

"""""""""""""""""""""""""""""""""" FORMATTING """"""""""""""""""""""""""""""""""

set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current

""""""""""""""""""""""""""""""""" KEY MAPPING """"""""""""""""""""""""""""""""""

nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

nmap j gj
nmap k gk

"""""""""""""""""""""""""""""""""" NERDTree """"""""""""""""""""""""""""""""""""

let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeNodeDelimiter = "\u00a0"

""""""""""""""""""""""""""""""" NERDCommenter """"""""""""""""""""""""""""""""""

let g:NERDSpaceDelims = 1

""""""""""""""""""""""""""""""""""" vim-go """""""""""""""""""""""""""""""""""""

let g:go_highlight_functions = 1
let g:go_highlight_methods = 0
let g:go_highlight_fields = 0
let g:go_highlight_types = 0
let g:go_highlight_operators = 0
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:go_def_mapping_enabled = 0
let g:go_code_completion_enabled = 0

let g:go_term_enabled = 1
let g:go_term_close_on_exit = 0

cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

if executable('rg')
  set grepprg=rg\ --no-heading\ --vimgrep
  set grepformat=%f:%l:%c:%m
endif

"""""""""""""""""""""""""""""""""" undotree """"""""""""""""""""""""""""""""""""

let g:undotree_WindowLayout = 3
let g:undotree_ShortIndicators = 1

set undodir=$HOME/dotfiles/editor/.vimdid/
set undofile                " So is persistent undo ...

"""""""""""""""""""""""""""""""""""" FZF """""""""""""""""""""""""""""""""""""""

map <C-p> :Files<CR>
nmap <leader>; :Buffers<CR>

let g:fzf_layout = { 'down': '~20%' }
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

""""""""""""""""""""""""""""""""""" tagbar """""""""""""""""""""""""""""""""""""

let g:tagbar_ctags_bin = '/usr/local/opt/ctags/bin/ctags'

let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }


"""""""""""""""""""""""""""""""""""" Rust """"""""""""""""""""""""""""""""""""""

let g:rustfmt_autosave = 1

"""""""""""""""""""""""""""""""""" coc.vim """""""""""""""""""""""""""""""""""""

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

"""""""""""""""""""""""""""""""""" vimwiki """""""""""""""""""""""""""""""""""""

nmap <Leader>vfl :VimwikiFollowLink<CR>

let g:vimwiki_global_ext = 0
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

let g:vimwiki_list = [{
  \ 'path': '$HOME/Disk/wiki',
  \ 'template_path': '$HOME/dotfiles/editor/wiki/templates',
  \ 'template_default': 'default',
  \ 'template_ext': '.tpl',
  \ 'syntax': 'markdown',
  \ 'auto_export': 0,
  \ 'nested_syntaxes': {
     \ 'go':'go',
     \ 'json':'json',
     \ 'php':'php',
     \ 'c':'c'
  \ },
  \ }]


""""""""""""""""""""""""""""" google/vim-codefmt """""""""""""""""""""""""""""""

augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  " autocmd FileType c,cpp,proto,javascript,arduino AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
  autocmd FileType rust AutoFormatBuffer rustfmt
  autocmd FileType vue AutoFormatBuffer prettier
augroup END
